AOS Assignment 2

/*
Q1)To create ‘n’ children. When the children will terminate, display total cumulative time children spent in user and kernel mode.
*/

#include<stdio.h> #include<sys/types.h> #include<sys/wait.h> #include<unistd.h> #include<time.h> #include<sys/times.h> #include<stdlib.h>

int main(void)
{
int i,status; pid_t pid;
time_t currentTime; struct tms cpuTime;

if((pid = fork())== -1)
{
perror("fork error"); exit(EXIT_FAILURE);
}
else if(pid==0)
{
time(&currentTime);
printf("Child proccess started at %s",ctime(&currentTime)); for(i=0;i< 5; ++i)
{
printf("Counting: %d \n",i); sleep(i);
}
 


}
else{
 
time(&currentTime);
printf("Child Process ended at %s",ctime(&currentTime)); exit(EXIT_SUCCESS);
 
time(&currentTime);
printf("Parent process Started at %s",ctime(&currentTime));

if(wait(&status)== -1)
perror("wait error"); if(WIFEXITED(status))
printf("Child Process ended normally");
else
printf("Child Process did not ended normally\n");
 
if(times(&cpuTime)<0)
perror("Times error");
else {
printf("Parent process user time = %ld \n",((double)
cpuTime.tms_utime)/_SC_CLK_TCK);

printf("Parent process system time = %ld \n",((double) cpuTime.tms_stime)/_SC_CLK_TCK);

printf("Child process user time = %ld \n",((double) cpuTime.tms_cutime)/_SC_CLK_TCK);

printf("Child process system time = %ld \n",((double) cpuTime.tms_cstime)/_SC_CLK_TCK);
}
time(&currentTime);
printf("Parent Process ended at %s",ctime(&currentTime)); exit(EXIT_SUCCESS);

}
}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./one Parent process Started at Fri May 27 07:15:16 2022
Child proccess started at Fri May 27 07:15:16 2022
Counting: 0
Counting: 1
Counting: 2
Counting: 3
Counting: 4
Child Process ended at Fri May 27 07:15:26 2022
Child Process ended normallyParent process user time = 94642740162689 Parent process system time = 94642744980800
Child process user time = 94642744980800 Child process system time = 94642744980800
Parent Process ended at Fri May 27 07:15:26 2022 ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$

*/


/*
Q.2)	To generate parent process to write unnamed pipe and will read from it.
*/

#include<stdio.h> #include<sys/types.h> #include<sys/wait.h> #include<unistd.h> #include<time.h> #include<sys/times.h>
 
#include<stdlib.h>

int main(void)
{
int i,status; pid_t pid;
time_t currentTime; struct tms cpuTime;

if((pid = fork())== -1)
{
perror("fork error"); exit(EXIT_FAILURE);
}
else if(pid==0)
{
time(&currentTime);
printf("Child proccess started at %s",ctime(&currentTime)); for(i=0;i< 5; ++i)
{
printf("Counting: %d \n",i); sleep(i);
}
 


}
else{
 
time(&currentTime);
printf("Child Process ended at %s",ctime(&currentTime)); exit(EXIT_SUCCESS);
 
time(&currentTime);
printf("Parent process Started at %s",ctime(&currentTime));

if(wait(&status)== -1)
perror("wait error"); if(WIFEXITED(status))
printf("Child Process ended normally");
else
printf("Child Process did not ended normally\n");

if(times(&cpuTime)<0)
perror("Times error");
else {
printf("Parent process user time = %ld \n",((double)
cpuTime.tms_utime)/_SC_CLK_TCK);

printf("Parent process system time = %ld \n",((double) cpuTime.tms_stime)/_SC_CLK_TCK);

printf("Child process user time = %ld \n",((double) cpuTime.tms_cutime)/_SC_CLK_TCK);

printf("Child process system time = %ld \n",((double) cpuTime.tms_cstime)/_SC_CLK_TCK);
 
}
time(&currentTime);
printf("Parent Process ended at %s",ctime(&currentTime)); exit(EXIT_SUCCESS);

}
}


Q.3)	// to create a file with a hole in it #include<stdio.h>
#include<fcntl.h> #include"string.h"

int main()
{
//create a new file by named as file.txt int n=creat("file.txt",0777);
//printf("--%d---\n",n);
char ch[16]="hello world how are"; char str[20]="od -c file.txt";
//change permission of file.txt with maximum access system("chmod 777 file.txt");
//write "helloworld string in file.txt write(n,ch,16);
// to move cursor from begging to 48th position

lseek(n,48,SEEK_SET);
//write "helloworld string in file.txt

write(n,ch,16);
// to prompt command in command prompt system(str);
return(0);
}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./hole 0000000   h   e   l l   o	w   o   r   l d	h o w
0000020 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0
*
0000060   h   e   l l   o	w   o   r   l d	h o w 0000100

here \0 are holes
*/
 
 
Q.4)	Q.4)
/*

*/
#include <stdio.h> #include <sys/stat.h> #include <fcntl.h>
int main (int argc, char *argv[])
{
struct stat fileStat; int fd=0,i;
FILE *filename;


for(i=0;i<argc;i++)
{
filename = argv[i];

if ( ( fd = open (filename , O_RDONLY) ) == -1)
{
perror ( "open " );
system("pause"); exit (1) ;
}

if(fstat(fd, &fileStat)<0) return 1;


printf("Inode for %s\n",filename); printf("	\n");
//printf("File Size: \t\t%d bytes\n",fileStat.st_size);
//printf("Number of Links: \t%d\n",fileStat.st_nlink); printf("File inode: \t\t%d\n\n",fileStat.st_ino);

}
//printf("\n%d\n",argc);
//printf("\n%s\n",argv[0]); return 0;
}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignments$ gcc q4.c -o findinode

ishan@ishan-VirtualBox:~/Desktop/AOS/Assignments$ ./findinode file.txt file2.txt Inode for ./findinode

File inode:

Inode for file.txt	424798
File inode:	425246
 
Inode for file2.txt

File inode:	425251
*/

Q.5)	Q.5)
/*
To handle the two-way communication between parent and child using pipe.
*/

#include<stdio.h> #include<unistd.h>

int main()
{
int pipefds1[2],pipefds2[2];
int returnstatus1, returnstatus2; int pid;
char pipe1writemessage[20]="Good"; char pipe2writemessage[20]="Nice"; char readmessage[20]; returnstatus1=pipe(pipefds1);

if(returnstatus1 == -1)
{
printf("Unable to create pipe 1\n"); return 1;
}
returnstatus2 = pipe(pipefds2);

if(returnstatus2 == -1)
{
printf("Unable to create pipe 2 \n"); return 1;
}

pid=fork();

if(pid!=0)
{
 





}
else
{
 
close(pipefds1[0]); close(pipefds2[1]);
printf("In Parent : Writing to pipe 1 - Message is %s \n",pipe1writemessage); write(pipefds1[1],pipe1writemessage,sizeof(pipe1writemessage)); read(pipefds2[0],readmessage,sizeof(readmessage));
printf("In Parent: Reading from pipe 1 - Message is %s \n",readmessage);


close(pipefds1[1]);
 
close(pipefds2[0]); read(pipefds1[0],readmessage,sizeof(readmessage));
printf("In child: Reading from pipe 1 - Message is %s \n",readmessage); printf("In child: Writing to pipe 2 -Message is %s \n",pipe2writemessage); write(pipefds2[1],pipe2writemessage,sizeof(pipe2writemessage));
}
return 0;
}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ cc q5.c -o five ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./five
In Parent : Writing to pipe 1 - Message is Good In child: Reading from pipe 1 - Message is Good In child: Writing to pipe 2 -Message is Nice
In Parent: Reading from pipe 1 - Message is Nice

*/

Q.6)	Q.6)
/*
6. Print the type of file where file name accepted through Command Line.
*/
#include<stdio.h> #include<stdlib.h> #include<fcntl.h> #include<sys/types.h> #include<sys/stat.h>

int main(int argc,char *argv[])
{
struct stat fileStat; int inode;
int fd; int i;

if(argc < 2)
{
 


}
else
{
 
fprintf(stderr,"usage: %s <file>\n",argv[0]); return 1;


printf("cc=%d\t%s",argc,argv[2]); for(i=0;i<argc;i++)
{
 
fd=open(argv[i],O_RDONLY); if(fd == -1)
{
perror("open"); return 1;
}
 
if(fstat(fd,&fileStat)<0)return 1; else
{
printf("Information for %s\n",argv[i]); printf("	\n");
printf("Type of file:\t%d\n",fileStat.st_mode);
}
}
}

}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ cc q6.c -o six ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./six
usage: ./six <file>

*/

Q.7)	Q.7)
#include <stdio.h> #include <stdlib.h>

void out (void)
{
printf ("atexit() succeeded!\n");
}
int main (void)
{
if (atexit (out))
fprintf(stderr, "atexit() failed!\n"); return 0;
}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./a.out atexit() succeeded!

*/

Q.8)	Q.8)
/*
Open a file goes to sleep for 15 seconds before terminating. sleep(seconds) returns the number of seconds not slept successfull call returns 0
*/ #include<stdio.h> #include<stdlib.h> #include<fcntl.h>
#include<sys/types.h> #include<sys/stat.h>

int main()
 
{
char fnm[20]; int fp;
struct stat st;
printf("\n Enter the filename :"); scanf("%s",fnm);

fp=open(fnm,O_RDONLY); if(fp < 0)
printf("\n File openinng error"); else
{
sleep(15);

}
close(fp);

}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./eight

Enter the filename :q1.c
*/

Q.9)	Q.9)

/*
To print the size of the file
*/
#include <stdio.h> #include <sys/stat.h> #include <fcntl.h>
int main (int argc, char *argv[])
{
struct stat fileStat; int fd=0;
FILE *filename;

filename = (FILE *)argv[1];
//printf("\n%s\n",argv[1]);

if ( ( fd = open (filename , O_RDONLY) ) == -1)
{
perror ("open ");
system("pause"); exit (1) ;
}

if(fstat(fd, &fileStat)<0) return 1;
printf("File Size: \t\t%d bytes\n",fileStat.st_size); printf("Mode: \t\t%d\n",fileStat.st_mode);
return 0;
 
}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ gcc q9.c -o filesize

ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./filesize file.txt File Size:	26 bytes

*/

Q.10)	Q.10)
/*
Read the current directory and display the names of files , no of files in the current directory
*/
#include <stdio.h> #include <dirent.h> int main()
{
struct dirent *de; //pointer to directory entry DIR *dr = opendir("."); //open current directory int cnt = 0;
if(dr == NULL) // check if directory not exist
{
printf("Cannot open a file \n"); return 0;
}
printf("Files in current Directory :\n"); while((de = readdir(dr))!= NULL )
{
printf("%s \n", de->d_name); cnt++;
}
printf("\nTotal Number of Files in current directory : %d\n",cnt); return 1;
}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ gcc q10.c -o name_and_nofiles ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./name_and_nofiles
Files in current Directory : file2.txt
..
q9.c filesize q4.c file.txt q6.c
name_and_nofiles q8.c
findinode q10.c
.
hole.c
 
Total Number of Files in current directory : 13

*/


Q.11)	Q.11)
/*11. Write a C program to implement the following unix/linux command (use fork, pipe and exec system call)

ls –l | wc –l*/

#include<stdio.h> #include<stdlib.h> #include<unistd.h>

int main(int argc,char** argv)
{
int des_p[2]; if(pipe(des_p) == -1)
{
perror("Pipe Failed"); exit(1);
}
if(fork()==0)
{
close(STDOUT_FILENO);
dup(des_p[1]);
close(des_p[0]);
close(des_p[1]);

const char* progl[] = {"ls","-l",0}; execvp(progl[0],progl); perror("execvp of ls failed"); exit(1);
}

if(fork()==0)
{
close(STDIN_FILENO); dup(des_p[0]);
close(des_p[1]);
close(des_p[0]);

const char* prog2[] = {"wc","-l",0}; execvp(prog2[0],prog2); perror("execvp of wc failed"); exit(1);
}

}

/*
 
Q.12)	Write a C program to display all the files from current directory which are created in particular month
*/ #include<stdio.h> #include<sys/stat.h> #include<fcntl.h> #include<stdlib.h>
#include<sys/types.h> #include<unistd.h> #include<dirent.h> #include<string.h> #include<time.h>


int main(void)
{
struct dirent *de; struct stat filestat; char dirnm[80];

strcpy(dirnm,getcwd(dirnm,sizeof(dirnm))); char mn[20];
printf("\n Enter the month: "); scanf("%s",&mn);
printf("\n Current Dir = %s\n",dirnm); DIR *dr = opendir(dirnm);

if(dr==NULL)
{
printf("Could not open current Directory"); return 0;
}
printf("Files created in the month if %s are : \n",mn);

while((de = readdir(dr)) != NULL)
{
if(stat(de->d_name,&filestat)<0) printf("Error");
 
else
{


}
}
 


//printf("%s",ctime(&filestat.st_mtime)); if(strstr(ctime(&filestat.st_mtime),mn))
printf("%s\n",de->d_name);
 
closedir(dr); return 0;

}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./twelve
 
Enter the month: May

Current Dir = /home/ishan/Desktop/AOS/Assignment 2 Files created in the month if May are :
q11.c file2.txt q20.c a.out
..
twelve q5.c q9.c q2.c eleven q16.c filesize q7.c thirteen q13.c q3.c six nine hole q4.c file.txt q12.c q6.c five q1.c
name_and_nofiles q8.c
q17.c findinode q10.c
.
eight one q15.c
*/


/*Q.13. Write a C program to display all the files from current directory whose size is greater that n Bytes Where n is accepted from user.
*/ #include<stdio.h> #include<sys/stat.h> #include<fcntl.h> #include<stdlib.h>
#include<sys/types.h> #include<unistd.h> #include<dirent.h> #include<string.h>
 
int main(void)
{
struct dirent *de; struct stat filestat; char dirnm[80]; int sz;

printf("Enter how many bytes :"); scanf("%d",&sz);

strcpy(dirnm,getcwd(dirnm,sizeof(dirnm))); printf("\n Current Dir = %s\n",dirnm);
DIR *dr = opendir(dirnm);

if(dr==NULL)
{
printf("Could not open current Directory \n"); return 0;
}
printf("Files are : \n");
while((de = readdir(dr)) != NULL)
{
if(stat(de->d_name,&filestat)<0) printf("Error");
 
else
{


}
}
 


printf("%d",&filestat.st_size); if((filestat.st_size) > sz)
printf("%s\n",de->d_name);
 
closedir(dr); return 0;

}

Q.14)

#include<stdio.h> #include<stdlib.h> #include<string.h>
int main(int argc, char * argv[])
{
char d[50]; if(argc == 2)
{
bzero(d,sizeof(d));
strcat(d,"ls");
strcat(d,">");
strcat(d,argv[1]); system(d);
 
}
else
{
printf("invalid input \n");
}

}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/AOS_Assignment 2$ cc q14.c -o fourteen ishan@ishan-VirtualBox:~/Desktop/AOS/AOS_Assignment 2$ ./fourteen
invalid input
ishan@ishan-VirtualBox:~/Desktop/AOS/AOS_Assignment 2$ ./fourteen file.txt ishan@ishan-VirtualBox:~/Desktop/AOS/AOS_Assignment 2$ cat file.txt
a.out eight eighteen eleven file2.txt filesize file.txt findinode firstPipe five fourteen hole
name_and_nofiles nine
ninteen NPReader.c NPWriter.c one
q10.c q11.c q12.c q13.c q14.c q15.c q16.c q17.c q18.c q19.c q1.c q20.c q21.c q22.c q25.c q26.c q2.c q3.c q4.c
 
q5.c q6.c q7.c q8.c q9.c
seventeen six sixteen thirteen twelve
twentyfive twentyone

*/

Q.15)
Write a c programm that display information of a given file . ls -l <filename>
*************************************************************/

#include<stdio.h> #include<stdlib.h> #include<sys/types.h> #include<unistd.h>
int spawn ( char * program ,char **arg_list )
{
pid_t child_pid; child_pid =fork(); if ( child_pid !=0 )
{
return child_pid;
}
else
{
execvp ( program ,arg_list ); fprintf(stderr,"An error occured in execvp"); abort();
}
}

int main ( int argc , char *argv[] )
{
char * fd =argv[1]; char *arg_list[]={
"ls", "-l", fd, NULL};
spawn ("ls" , arg_list); printf("%s", fd); return 0;
}

/*
 
null)ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ total 192 drwxrwxr-x 2 ishan ishan 4096 May 24 12:59 25May
-rwxrwxr-x 1 ishan ishan 16992 May 24 16:59 a.out
-rw-rw-r-- 1 ishan ishan	17 May 15 10:09 file2.txt
-rwxrwxr-x 1 ishan ishan 17024 May 15 11:49 filesize
-rwxrwxrwx 1 ishan ishan	64 May 24 15:45 file.txt
-rwxrwxr-x 1 ishan ishan 17064 May 15 10:35 findinode
-rwxrwxr-x 1 ishan ishan 16880 May 24 14:34 hole
-rwxrwxr-x 1 ishan ishan 16832 May 15 13:22 name_and_nofiles
-rwxrwxr-x 1 ishan ishan 17024 May 15 15:12 nine
-rw-rw-r-- 1 ishan ishan 1016 May 15 13:25 q10.c
-rw-rw-r-- 1 ishan ishan	0 May 15 14:22 q12.c
-rw-rw-r-- 1 ishan ishan 905 May 15 14:44 q13.c
-rw-rw-r-- 1 ishan ishan 943 May 24 16:59 q15.c
-rw-rw-r-- 1 ishan ishan	0 May 15 14:22 q16.c
-rw-rw-r-- 1 ishan ishan	0 May 15 14:22 q17.c
-rw-rw-r-- 1 ishan ishan 1023 May 22 21:16 q20.c
-rw-rw-r-- 1 ishan ishan 991 May 24 15:44 q3.c
-rw-rw-r-- 1 ishan ishan 1210 May 15 11:58 q4.c
-rw-rw-r-- 1 ishan ishan 551 May 24 14:36 q6.c
-rw-rw-r-- 1 ishan ishan 288 May 24 16:58 q7.c
-rw-rw-r-- 1 ishan ishan 192 May 24 16:50 q8.c
-rw-rw-r-- 1 ishan ishan 735 May 15 15:11 q9.c
-rwxrwxr-x 1 ishan ishan 17024 May 15 15:06 thirteen
^C

*/

Q.16) Write a C program that behaves like a shell (command interpreter). It has its own prompt say “NewShell$”. Any normal shell command is executed from your shell by starting a child process to execute the system program corresponding to the command. It should additionally interpret the following command
i)	count c <filename> - print number of characters in file
ii)	count w <filename> - print number of words in file iii)count l <filename> - print number of lines in file
*/

#include<stdio.h> #include<string.h> #include<stdlib.h> #include<sys/stat.h>

int main()
{
char cmd[80],t1[20],t2[20],t3[20],ch; int charcnt=0,linecnt=0,wcnt=0; FILE *fp;
int pid; pid=vfork();
 
printf("PP = %d",pid); if(pid==0)
{
while(1)
{
printf("\n NewShell$:"); gets(cmd);
sscanf(cmd,"%s %s %s",t1,t2,t3);

if(strcmp(t1,"count")==0)
{
switch(t2[0])
{
case 'c' : fp=fopen(t3,"r");
while((ch=getc(fp))!=EOF)
{
charcnt++;
}
printf("\n No of chars = %d",charcnt); fclose(fp);
break;
case 'l' : fp=fopen(t3,"r");
while((ch=getc(fp))!=EOF)
{
if(ch=='\n')linecnt++;
}
printf("\n No of lines = %d",linecnt); fclose(fp);
break;
case 'w' : fp=fopen(t3,"r");
while((ch=getc(fp))!=EOF)
{
if(ch=='\n' || ch==' ')
wcnt++;
}
 




}
}
else
{
 
printf("\n No of words = %d",wcnt); fclose(fp);
break;
default : printf("Invalid Choice"); break;
 
printf("Invalid Option"); exit(0);
}
}
}
}

/*
 
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./sixteen PP = 0
NewShell$:count c q1.c

No of chars = 2139 NewShell$:count w q1.c

No of words = 254 NewShell$:count l q1.c

No of lines = 84

*/

Q.17)
Write a C program that behaves like a shell (command interpreter). It has its own prompt say “NewShell$”. Any normal shell command is executed from your shell by starting a child process to execute the system program corresponding to the command. It should additionally interpret the following command.

i)	list f <dirname> - print name of all files in directory

ii)	list n <dirname> - print number of all entries

iii)	list i<dirname> - print name and inode of all files
*/

#include<stdio.h> #include<stdlib.h> #include<string.h> #include<unistd.h> #include<fcntl.h> #include<dirent.h> int main()
{
char command[30],cmd[10],dnm[50],op[50],func[50]; DIR *dp;
struct dirent *dirf; int file,pid,cnt=0;

while(1)
{
printf("\n ---"); gets(func);
sscanf(func,"%s %s %s",cmd,op,dnm); pid=fork();
if(pid==0)
{
if(strcmp(cmd,"list")==0)
{
if(op[0]=='f')
{
 
dp=opendir(dnm); while((dirf=readdir(dp))!=NULL)
{
printf("\n Name %s",dirf->d_name);
}
closedir(dp);
}
if(op[0]=='n')
{
cnt=0; dp=opendir(dnm);
while((dirf=readdir(dp))!=NULL)
{
cnt++;
}
printf("\n Number of files %d",cnt); closedir(dp);
}
if(op[0]=='i')
{
dp=opendir(dnm); while((dirf=readdir(dp))!=NULL)
{
printf("\n File name=%s and nodes=%d \n",dirf->d_name,dirf->d_ino);
}
closedir(dp);
}
}
else if(strcmp(cmd,"exit")==0)
{
exit(0);
}
}
}
}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./seventeen

---list f /home

---
Name ishan Name ..
Name .
---list n /home/

---
Number of files 3
---list i /home/

---
File name=ishan and nodes=398228
 
File name=.. and nodes=2

File name=. and nodes=393218

---

*/

/*Q.18
Write a C program that behaves like a shell (command interpreter). It has its own prompt say “NewShell$”. Any normal shell command is executed from your shell by starting a child process to execute the system

program corresponding to the command. It should additionally interpret the following command.

i)	typeline +10 <filename> - print first 10 lines of file

ii)	typeline -20 <filename> - print last 20 lines of file

iii)	typeline a <filename> - print all lines of file
*/

#include<stdio.h> #include<stdlib.h> #include<string.h> #include<unistd.h> #include<fcntl.h>

int main()
{
FILE *fp;
int n,cnt2,cnt=1,flag=0,pid,i=0;
char func[50],cmd[50],fnm[50],op[50],line[80],buff[80],ch;

while(1)
{
printf("\n New Shell $ # "); gets(func);
sscanf(func,"%s %s %s",cmd,op,fnm); if(strcmp(cmd,"typeline")==0)
{
fp=open(fnm,O_RDONLY); if(fp==-1)
{
 

}
else
{
 
printf("\n File Not Found");


if(op[0]=='+')
{
 
cnt=1;
 
n=atoi(op);
printf("\n First %d lines are",n); while(cnt<=n)
{
read(fp,buff,1); ch=buff[0]; printf("%c",ch); if(ch=='\n')
cnt++;
}
close(fp);
}
else if(op[0]=='a')
{
fp=open(fnm,O_RDONLY); while(read(fp,buff,1)!=0)
{
ch=buff[0]; printf("%c",ch);
}
close(fp);
}
else if(op[0]=='-')
{
cnt=0; fp=open(fnm,O_RDONLY); n=atoi(op);
printf("Print last %d lines \n",n); while(read(fp,buff,1)!=0)
{
ch=buff[0]; if(ch=='\n')
{
cnt++;
}
}
cnt2=cnt+n; int x=1; cnt=0;
lseek(fp,0,SEEK_SET); while(x<=cnt2)
{
read(fp,buff,1); ch=buff[0]; if(ch=='\n')
{ x++;
}
}
while(read(fp,buff,1)!=0)
{
ch=buff[0];
 
printf("%c",ch);
}
close(fp);
}
}
}
}
}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./eighteen

New Shell $ # typeline a file.txt hello world how hello world how New Shell $ # typeline a q1.c

To create ‘n’ children. When the children will terminate, display total cumulative time children spent in user and kernel mode.


#include<stdio.h> #include<sys/types.h> #include<sys/wait.h> #include<unistd.h> #include<time.h> #include<sys/times.h> #include<stdlib.h>

int main(void)
{
int i,status; pid_t pid;
time_t currentTime; struct tms cpuTime;

if((pid = fork())== -1)
{
perror("fork error"); exit(EXIT_FAILURE);
}
else if(pid==0)
{
time(&currentTime);
printf("Child proccess started at %s",ctime(&currentTime)); for(i=0;i< 5; ++i)
{
printf("Counting: %d \n",i); sleep(i);
}
time(&currentTime);
printf("Child Process ended at %s",ctime(&currentTime)); exit(EXIT_SUCCESS);
 

else{
 
}

time(&currentTime);
printf("Parent process Started at %s",ctime(&currentTime));

if(wait(&status)== -1)
perror("wait error"); if(WIFEXITED(status))
printf("Child Process ended normally");
 
else
printf("Child Process did not ended normally\n");

if(times(&cpuTime)<0)
perror("Times error");
else {
printf("Parent process user time = %ld \n",((double)
cpuTime.tms_utime)/_SC_CLK_TCK);

printf("Parent process system time = %ld \n",((double) cpuTime.tms_stime)/_SC_CLK_TCK);

printf("Child process user time = %ld \n",((double) cpuTime.tms_cutime)/_SC_CLK_TCK);

printf("Child process system time = %ld \n",((double) cpuTime.tms_cstime)/_SC_CLK_TCK);
}
time(&currentTime);
printf("Parent Process ended at %s",ctime(&currentTime)); exit(EXIT_SUCCESS);

}
}


ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./one Parent process Started at Fri May 27 07:15:16 2022
Child proccess started at Fri May 27 07:15:16 2022
Counting: 0
Counting: 1
Counting: 2
Counting: 3
Counting: 4
Child Process ended at Fri May 27 07:15:26 2022
Child Process ended normallyParent process user time = 94642740162689 Parent process system time = 94642744980800
Child process user time = 94642744980800 Child process system time = 94642744980800
Parent Process ended at Fri May 27 07:15:26 2022 ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$
 
New Shell $ # typeline +10 q1.c

First 10 lines are/*
To create ‘n’ children. When the children will terminate, display total cumulative time children spent in user and kernel mode.


#include<stdio.h> #include<sys/types.h> #include<sys/wait.h> #include<unistd.h> #include<time.h> #include<sys/times.h>

New Shell $ # typeline -c q1.c Print last 0 lines

New Shell $ # typeline -5 q1.c Print last -5 lines
Child process system time = 94642744980800 Parent Process ended at Fri May 27 07:15:26 2022
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$


New Shell $ #


*/

Q.19)	Write a C program that behaves like a shell (command interpreter). It has its own prompt say “NewShell$”.Any normal shell command is executed from your shell by starting a child process to execute the system program corresponding to the command. It should
i)	additionally interpret the following command.

ii)	search f <pattern> <filename> - search first occurrence of pattern in filename

iii)	search c <pattern> <filename> - count no. of occurrences of pattern in filename
iv)	search a <pattern> <filename> - search all occurrences of pattern in filename #include<stdio.h>
#include<stdlib.h> #include<string.h> #include<unistd.h> #include<fcntl.h>

int main()
{
FILE *fp;
int n,cnt=1,flag=0,pid,i=0;
 
char func[50],cmd[50],fnm[50],op[50],pat[50],line[80],buff[80],ch;

while(1)
{

printf("\n New Shell $ # "); gets(func);
sscanf(func,"%s %s %s %s",cmd,op,pat,fnm); pid=fork();
if(pid==0)
{
if(strcmp(cmd,"search")==0)
{
fp=open(fnm,O_RDONLY); if(fp==-1)
{
printf("\n File Not Found");
}
else
{
if(op[0]=='f')
{
while(read(fp,buff,1)!=0)
{

ch=buff[0]; if(ch!='\n')
{
line[i]=ch; i++;
}
if(ch=='\n')
{
line[i]=ch; if(strstr(line,pat)!=NULL)
{
flag=1;
printf("Pattern found %s cnt=%d",pat,cnt); break;
}
else
{
flag=0; cnt++;
}
i=0;
}
}
if(flag==0)
{
printf("\nPattern not found\n");
}
 
}

else if(op[0]=='a')
{
while(read(fp,buff,1)!=0)
{
ch=buff[0]; if(ch!='\n')
{
line[i]=ch; i++;
}
if(ch=='\n')
{
if(strstr(line,pat)!=NULL)
{
flag=1;
printf("\n Pattern found %s cnt=%d",pat,cnt); cnt++;
}
else
{
flag=0; cnt++;
}
i=0;
}
}
if(flag==0)
{
printf("\nPattern not found\n");
}

}
else if(op[0]=='c')
{
cnt=0; while(read(fp,buff,1)!=0)
{
ch=buff[0]; if(ch!='\n')
{
line[i]=ch; i++;
}
if(ch=='\n')
{
if(strstr(line,pat)!=NULL)
{
flag=1; cnt++;
 
} i=0;
}
}
printf("\n\n Pattern %s and at cnt=%d",pat,cnt);
}
}
}
else if(strcmp(cmd,'exit')==0)
{
exit(0);
}
}
}
}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./ninteen New Shell $ # search f main q1.c
New Shell $ # Pattern found main cnt=13 New Shell $ # search c include q1.c

New Shell $ #

Pattern include and at cnt=8
New Shell $ # search a printf q1.c

New Shell $ #
Pattern found printf cnt=28 Pattern found printf cnt=31 Pattern found printf cnt=35 Pattern found printf cnt=40 Pattern found printf cnt=41 Pattern found printf cnt=45 Pattern found printf cnt=47 Pattern found printf cnt=48 Pattern found printf cnt=52 Pattern found printf cnt=53 Pattern found printf cnt=54 Pattern found printf cnt=55 Pattern found printf cnt=56 Pattern found printf cnt=57 Pattern found printf cnt=58 Pattern found printf cnt=59 Pattern found printf cnt=61 Pattern not found

*/

Q.20)	//sort file according to size of file
 
#include<stdio.h> #include<string.h> #include<sys/stat.h>


struct list
{
 


}l[10];
 
char fname[20]; int size;
 


void main(int argc,char *argv[])
{
int i=0,j;
struct stat sbuff; struct list temp; for(i=1;i<argc;i++)
{
stat(argv[i],&sbuff); strcpy(l[i-1].fname,argv[i]); l[i-1].size=sbuff.st_size;
}

//bubble sort for(i=0;i<argc-1;i++)
{
for(j=i+1;j<argc-1;j++)
{
if(l[i].size > l[j].size)
{
strcpy(temp.fname,l[j].fname); temp.size=l[j].size; strcpy(l[j].fname,l[i].fname); l[j].size=l[i].size; strcpy(l[i].fname,temp.fname); l[i].size=temp.size;

}
}
}
//printing
printf("File Name\t File Size\n");

for(i=0;i<argc-1;i++)
{
printf("\n%s\t%d",l[i].fname,l[i].size);
}

}
/*
 
ishan@ishan-VirtualBox:~/Desktop/AOS/UnixShell/unix$ ./ascendingOrder search_unix.txt mysearchunix.txt dir_inode.txt ls_output_txt.txt
File Name	File Size

mysearchunix.txt	123
dir_inode.txt 337
search_unix.txt	727
ls_output_txt.txt	1967
*/

Q.21. Write a C program which create a child process which catch a signal sighup, sigint and sigquit. The Parent
process send a sighup or sigint signal after every 3 seconds, at the end of 30 second parent send sigquit signal to child and child terminates my displaying message "My DADDY has Killed me!!!”.*/
#include <signal.h> #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h>

// function declaration void sighup();
void sigint(); void sigquit();

// driver code void main()
{
int pid;

/* get child process */ if ((pid = fork()) < 0)
{
perror("fork"); exit(1);
}
sleep(3);
if (pid == 0)
{		/* child */ printf("II:");
signal(SIGHUP, sighup); signal(SIGINT, sigint); signal(SIGQUIT, sigquit); for (;;);
/* loop for ever */
}

else /* parent */
{ /* pid hold id of child */
printf("\nPARENT: sending SIGHUP\n\n"); kill(pid, SIGHUP);
 
sleep(3); /* pause for 3 secs */ printf("\nPARENT: sending SIGINT\n\n"); kill(pid, SIGINT);

sleep(3); /* pause for 3 secs */ printf("\nPARENT: sending SIGQUIT\n\n"); kill(pid, SIGQUIT);
sleep(3);
}
}

// sighup() function definition void sighup()

{
signal(SIGHUP, sighup); /* reset signal */ printf("CHILD: I have received a SIGHUP\n");
}

// sigint() function definition void sigint()
{
signal(SIGINT, sigint); /* reset signal */ printf("CHILD: I have received a SIGINT\n");
}

// sigquit() function definition void sigquit()
{
printf("My DADDY has Killed me!!!\n"); exit(0);
}

/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ cc q21.c -o twentyone ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./twentyone

PARENT: sending SIGHUP PARENT: sending SIGINT PARENT: sending SIGQUIT
*/



Q.22)
 

 
Q.23)



Q.24)




Q.25. Write a C program that illustrates suspending and resuming processes using signals.
*/
#include <signal.h> #include <stdio.h> int main ()
{
int pid1; int pid2;
pid1 = fork();
if (pid1 == 0) /* First child */
{
while (1) /* Infinite loop */
{
printf ("pid1 is alive\n"); sleep (1);
}
}
pid2 = fork (); /* Second child */ if (pid2 == 0)
{
while (1) /* Infinite loop */
{
printf ("pid2 is alive\n"); sleep (1);
}
}
sleep (3);
kill (pid1, SIGSTOP); /* Suspend first child */ sleep (3);
kill (pid1, SIGCONT); /* Resume first child */ sleep (3);
kill (pid1, SIGINT); /* Kill first child */ kill (pid2, SIGINT); /* Kill second child */
}
/*
ishan@ishan-VirtualBox:~/Desktop/AOS/Assignment 2$ ./twentyfive pid2 is alive
pid1 is alive pid2 is alive pid1 is alive
 
pid2 is alive pid1 is alive pid2 is alive pid2 is alive pid2 is alive pid1 is alive pid2 is alive pid1 is alive pid2 is alive pid1 is alive pid2 is alive
*/

Q.26)
